#ifndef GLOBAL_INCLUDE_H
#define GLOBAL_INCLUDE_H

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

enum Cmd
{
    hlt = 0,
    push,
    pop,
    add,
    sub,
    mul,
    dive,
    out,
    outr,
    jmp,
    ja,
    jae,
    jb,
    jbe,
    je,
    jne,
    CMD_QUANT // count
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct PushType
{
    unsigned int stk   : 1;
    unsigned int reg   : 1;
    unsigned int mem   : 1;
    unsigned int sum   : 1;
};


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct PopType
{
    unsigned int reg   : 1;
    unsigned int mem   : 1;
    unsigned int sum   : 1;
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

enum Registers
{
    ax = 0,
    bx,
    cx,
    dx,
    REGISTERS_QUANT, // Count
    REGISTERS_NAME_LEN = 2,
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

enum ArithmeticOperator
{
    plus, 
    minus,
    multiplication,
    division
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

enum ComparisonOperator
{
    above,
    above_or_equal,
    bellow,
    bellow_or_equal,
    equal,
    not_equal,
    always_true
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct IOfile
{
    const char* ProgrammFile;
    const char* CodeFile;
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct CodePlace
{
    const char* file;
    int         line;
    const char* func;
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void PrintPlace     (                  const char* const file, const int line, const char* const func);
void CodePlaceCtor  (CodePlace* place, const char* const file, const int line, const char* const func);

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define PRINT_PLACE(color, file, line, func) printf(color); PrintPlace(file, line, func); printf(RESET)

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define RETURN_IF_FALSE(flag, returnElem, ...) \
if (!(flag))                                    \
{                                                \
    __VA_ARGS__;                                  \
    return returnElem;                             \
}                                                   \

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define RETURN_IF_TRUE(flag, returnElem, ...) \
if ((flag))                                    \
{                                               \
    __VA_ARGS__;                                 \
    return returnElem;                            \
}     

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define FREE(Arr) free(Arr); Arr = NULL;

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#endif
